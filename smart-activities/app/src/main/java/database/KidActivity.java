package database;

import database.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table KID_ACTIVITY.
 */
public class KidActivity {

    private Long id;
    private String name;
    private String imgUrl;
    private Integer orderNumber;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient KidActivityDao myDao;

    private NFCDevice nFCDevice;
    private Long nFCDevice__resolvedKey;

    private Action action;
    private Long action__resolvedKey;


    public KidActivity() {
    }

    public KidActivity(Long id) {
        this.id = id;
    }

    public KidActivity(Long id, String name, String imgUrl, Integer orderNumber) {
        this.id = id;
        this.name = name;
        this.imgUrl = imgUrl;
        this.orderNumber = orderNumber;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getKidActivityDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getImgUrl() {
        return imgUrl;
    }

    public void setImgUrl(String imgUrl) {
        this.imgUrl = imgUrl;
    }

    public Integer getOrderNumber() {
        return orderNumber;
    }

    public void setOrderNumber(Integer orderNumber) {
        this.orderNumber = orderNumber;
    }

    /** To-one relationship, resolved on first access. */
    public NFCDevice getNFCDevice() {
        Long __key = this.kidActivityId;
        if (nFCDevice__resolvedKey == null || !nFCDevice__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            NFCDeviceDao targetDao = daoSession.getNFCDeviceDao();
            NFCDevice nFCDeviceNew = targetDao.load(__key);
            synchronized (this) {
                nFCDevice = nFCDeviceNew;
            	nFCDevice__resolvedKey = __key;
            }
        }
        return nFCDevice;
    }

    public void setNFCDevice(NFCDevice nFCDevice) {
        synchronized (this) {
            this.nFCDevice = nFCDevice;
            kidActivityId = nFCDevice == null ? null : nFCDevice.getId();
            nFCDevice__resolvedKey = kidActivityId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Action getAction() {
        Long __key = this.kidActivityId;
        if (action__resolvedKey == null || !action__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ActionDao targetDao = daoSession.getActionDao();
            Action actionNew = targetDao.load(__key);
            synchronized (this) {
                action = actionNew;
            	action__resolvedKey = __key;
            }
        }
        return action;
    }

    public void setAction(Action action) {
        synchronized (this) {
            this.action = action;
            kidActivityId = action == null ? null : action.getId();
            action__resolvedKey = kidActivityId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
