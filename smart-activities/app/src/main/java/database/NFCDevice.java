package database;

import database.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table NFCDEVICE.
 */
public class NFCDevice {

    private Long id;
    private String deviceId;
    private Long kidActivityId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient NFCDeviceDao myDao;

    private KidActivity kidActivity;
    private Long kidActivity__resolvedKey;


    public NFCDevice() {
    }

    public NFCDevice(Long id) {
        this.id = id;
    }

    public NFCDevice(Long id, String deviceId, Long kidActivityId) {
        this.id = id;
        this.deviceId = deviceId;
        this.kidActivityId = kidActivityId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getNFCDeviceDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getDeviceId() {
        return deviceId;
    }

    public void setDeviceId(String deviceId) {
        this.deviceId = deviceId;
    }

    public Long getKidActivityId() {
        return kidActivityId;
    }

    public void setKidActivityId(Long kidActivityId) {
        this.kidActivityId = kidActivityId;
    }

    /** To-one relationship, resolved on first access. */
    public KidActivity getKidActivity() {
        Long __key = this.kidActivityId;
        if (kidActivity__resolvedKey == null || !kidActivity__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            KidActivityDao targetDao = daoSession.getKidActivityDao();
            KidActivity kidActivityNew = targetDao.load(__key);
            synchronized (this) {
                kidActivity = kidActivityNew;
            	kidActivity__resolvedKey = __key;
            }
        }
        return kidActivity;
    }

    public void setKidActivity(KidActivity kidActivity) {
        synchronized (this) {
            this.kidActivity = kidActivity;
            kidActivityId = kidActivity == null ? null : kidActivity.getId();
            kidActivity__resolvedKey = kidActivityId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
